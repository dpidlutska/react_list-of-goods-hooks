{"version":3,"sources":["App.tsx","components/GoodCard/GoodCard.tsx","components/GoodsList/GoodsList.tsx","index.tsx"],"names":["SortType","GoodCard","good","name","GoodsList","goods","className","map","id","goodsFromServer","App","useState","NoSorting","sortField","setSortField","isReversed","setIsReversed","visibleGoods","preparedGoods","index","Alphabetically","ByLength","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","isSorted","type","onClick","cn","prevValue","ReactDOM","render","document","getElementById"],"mappings":"6KAqBKA,E,qECdQC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,oBAAI,UAAQ,OAAZ,SAAoBA,EAAKC,QCCdC,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,oBAAIC,UAAU,YAAd,SACGD,EAAME,KAAI,SAAAL,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKM,UFJzBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGT,K,gCAAAA,E,qBAAAA,E,cAAAA,M,KAwCE,IAAMU,EAAgB,WAC3B,MAAkCC,mBAASX,EAASY,WAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EArCR,SACEZ,EACAQ,EACAE,GAEA,IAAMG,EAAgBb,EAAME,KAAI,SAACL,EAAMiB,GAAP,MAAkB,CAChDhB,KAAMD,EACNM,GAAIW,EAAQ,MAwBd,OArBIN,IAAcb,EAASoB,gBACtBP,IAAcb,EAASqB,UAE1BH,EAAcI,MAAK,SAACC,EAAOC,GACzB,OAAQX,GACN,KAAKb,EAASoB,eACZ,OAAOG,EAAMpB,KAAKsB,cAAcD,EAAMrB,MAExC,KAAKH,EAASqB,SACZ,OAAOE,EAAMpB,KAAKuB,OAASF,EAAMrB,KAAKuB,OAExC,QACE,OAAO,MAKXX,GACFG,EAAcS,UAGTT,EAMcU,CACnBnB,EAAiBI,EAAWE,GAOxBc,EAAYhB,GAAaE,EAE/B,OACE,sBAAKT,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEwB,KAAK,SACLC,QAAS,kBAAOjB,EAAad,EAASoB,iBACtCd,UACE0B,IACE,SACA,UACA,CAAE,WAAYnB,IAAcb,EAASoB,iBAP3C,iCAcA,wBACEU,KAAK,SACLC,QAAS,kBAAOjB,EAAad,EAASqB,WACtCf,UACE0B,IACE,SACA,aACA,CAAE,WAAYnB,IAAcb,EAASqB,WAP3C,4BAcA,wBACES,KAAK,SACLxB,UAAW0B,IAAG,SAAU,aAAc,CAAE,YAAajB,IACrDgB,QAAS,kBAAMf,GAAc,SAAAiB,GAAS,OAAKA,MAH7C,qBAQCJ,GACC,wBACEC,KAAK,SACLxB,UAAU,4BACVyB,QAlDI,WACZjB,EAAad,EAASY,WACtBI,GAAc,IA6CR,sBAUJ,cAAC,EAAD,CAAWX,MAAOY,QGzHxBiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.47b4fd6f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\n\nimport './App.scss';\nimport { Good } from './types/Good';\nimport { GoodsList } from './components/GoodsList/GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetically = 'alphabetically',\n  ByLength = 'by length',\n  NoSorting = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  isReversed: boolean,\n): Good[] {\n  const preparedGoods = goods.map((good, index) => ({\n    name: good,\n    id: index + 1,\n  }));\n\n  if (sortField === SortType.Alphabetically\n    || sortField === SortType.ByLength\n  ) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Alphabetically:\n          return good1.name.localeCompare(good2.name);\n\n        case SortType.ByLength:\n          return good1.name.length - good2.name.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.NoSorting);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, sortField, isReversed,\n  );\n  const reset = () => {\n    setSortField(SortType.NoSorting);\n    setIsReversed(false);\n  };\n\n  const isSorted = (sortField || isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => (setSortField(SortType.Alphabetically))}\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortField !== SortType.Alphabetically },\n            )\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => (setSortField(SortType.ByLength))}\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortField !== SortType.ByLength },\n            )\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', { 'is-light': !isReversed })}\n          onClick={() => setIsReversed(prevValue => !prevValue)}\n        >\n          Reverse\n        </button>\n\n        {isSorted && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodsList goods={visibleGoods} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Good } from '../../types/Good';\n\ntype Props = {\n  good: Good;\n};\n\nexport const GoodCard: React.FC<Props> = ({ good }) => (\n  <li data-cy=\"Good\">{good.name}</li>\n);\n","import React from 'react';\n\nimport { Good } from '../../types/Good';\nimport { GoodCard } from '../GoodCard/GoodCard';\n\ntype Props = {\n  goods: Good[];\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"GoodsList\">\n    {goods.map(good => (\n      <GoodCard good={good} key={good.id} />\n    ))}\n  </ul>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}